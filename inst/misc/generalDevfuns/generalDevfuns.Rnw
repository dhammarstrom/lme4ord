\documentclass[12pt]{article}
\usepackage{amsmath}
\usepackage{bm}
\usepackage{fullpage}
\usepackage{mathrsfs}

\DeclareMathAlphabet{\mathpzc}{OT1}{pzc}{m}{it}

\newcommand{\mat}{\bm}
\newcommand{\trans}{^\top}
\newcommand{\vc}{\mathrm{vec}}
\newcommand{\dnorm}{\mathcal{N}}
\newcommand{\dexpfam}{\mathcal{D}}

\author{Steve Walker}
\title{Making general deviance functions for mixed/factor models in lme4}
\date{}

\begin{document}

\maketitle
\tableofcontents

<<prelim, message = FALSE, results = 'hide', echo = FALSE, cache = FALSE>>=
library("lme4ord")
library("lme4")
library("multitable")
opts_chunk$set(cache = TRUE)
@ %

\section{Introduction}

The generalized linear mixed model (GLMM) in \texttt{lme4} takes the
form,
\begin{equation}
  \label{eq:6}
  \bm\eta = \bm X\bm\beta + \bm Z\bm b
\end{equation}
\begin{equation}
  \label{eq:10}
  \bm b = \bm\Lambda_{\bm\theta}\bm u
\end{equation}
\begin{equation}
  \label{eq:7}
  \bm u \sim \dnorm(0, \bm I)
\end{equation}
\begin{equation}
  \label{eq:8}
  \bm y \sim \dexpfam (\bm\eta, \bm\phi)
\end{equation}
where $\dexpfam$ is an exponential family distribution. This GLMM is
suitable for modelling a wide variety of data.  However, in community
ecology the response variables are often species abundances or species
presence-absence, and such data are often characterized by
correlations between species even after the effects of environmental,
phylogenetic, and space are accounted for.  These correlations among
species are typically due to either unmeasured site and species
characteristics and species interactions.  These correlations can be
accounted for by allowing $\bm Z$ to depend on a vector of parameters,
$\bm\psi$.  Therefore the model that we will be using is given by,
\begin{equation}
  \label{eq:6}
  \bm\eta = \bm X\bm\beta + \bm Z_{\bm\psi}\bm\Lambda_{\bm\theta}\bm u
\end{equation}
We now have three parameter vectors:
\begin{itemize}
\item covariance parameters, $\bm\theta$, \texttt{covar}
\item fixed effect parameters, $\bm\beta$, \texttt{fixef}
\item general factor loadings, $\bm\psi$, \texttt{loads}
\end{itemize}
Here I illustrate a function, \texttt{mkGeneralGlmerDevfun}, in the
\texttt{lme4ord} package, which can be used to fit such models.

\section{Model specification}

\subsection{Factor models}

\subsection{Covariance template models}

Consider an \texttt{lmer} model with the following random effects term,
\begin{equation}
  \label{eq:9}
  \mathtt{(0 + explVar:grpFac1 | grpFac2)}
\end{equation}

<<simLmer>>=
library("lme4ord")
library("lme4")
library("multitable")
form <- y ~ 1 + (0 + x:g1 | g2)
covMat <- crossprod(rmat(11, 10))
covMat <- covMat / (det(covMat)^(1/10))
dimnames(covMat) <- rep(list(letters[1:10]))
g1 <- factorCov(letters[1:10])

dl <- data.list(y = matrix(rnorm(10 * 1), 10, 1), x = rnorm(10), 
                g1 = letters[1:10], g2 = LETTERS[1])

variable(covMat, c("D1", "D1"), check = FALSE)


dl <- dl + variable(covMat, c("g1", "g1"), "covMat")
df <- as.data.frame(dl)
m <- lmer(form, df, control = dontStopLmer())
@ %


%% Suppose that $\bm V = \bm L\bm L^\top$ is a covariance matrix over the
%% levels of a grouping factor (e.g. a phylogenetic covariance over
%% species), where $\bm L$ is a Cholesky factor.  Suppose that this
%% grouping factor is crossed with another grouping factor (e.g. species
%% are crossed with sites).  There are two immediate possible models for
%% the structure of covariance over the site-species combinations: a
%% dense model and a block-diagonal model.  To illustrate them we
%% consider two sites for simplicity.  The dense model assumes that
%% species are phylogenetically correlated both within and among sites,
%% \begin{equation}
%%   \label{eq:2}
%%   \bm\Sigma_\theta = \bm\Lambda_\theta\bm\Lambda_\theta^\top =
%%   \theta^2\begin{bmatrix}
%%     \bm L & \bm 0 \\
%%     \bm L & \bm 0 \\
%%   \end{bmatrix}
%%   \begin{bmatrix}
%%     \bm L^\top & \bm L^\top \\
%%     \bm 0      & \bm 0      \\
%%   \end{bmatrix} = 
%%   \theta^2\begin{bmatrix}
%%     \bm V & \bm V \\
%%     \bm V & \bm V \\
%%   \end{bmatrix}
%% \end{equation}
%% whereas the block-diagonal model assumes phylogenetic correlation only
%% within sites,
%% \begin{equation}
%%   \label{eq:2}
%%   \bm\Sigma_\theta = \bm\Lambda_\theta\bm\Lambda_\theta^\top =
%%   \theta^2\begin{bmatrix}
%%     \bm L & \bm 0 \\
%%     \bm 0 & \bm L \\
%%   \end{bmatrix}
%%   \begin{bmatrix}
%%     \bm L^\top & \bm 0      \\
%%     \bm 0      & \bm L^\top \\
%%   \end{bmatrix} = 
%%   \theta^2\begin{bmatrix}
%%     \bm V & \bm 0 \\
%%     \bm 0 & \bm V \\
%%   \end{bmatrix}
%% \end{equation}
%% Interestingly, given that \texttt{lme4} parameterizes covariance
%% models by Cholesky factors, both models require the same amount of
%% structural zeros in the parameterization (because each requires one
%% $\bm L$ per site) even though the covariance matrices themselves
%% differ strongly in the number structural zeros.  That is, the dense
%% model is only dense on the covariance scale, not on the Cholesky
%% scale.

%% Suppose that an explanatory variable, $\bm x$, is measured at each
%% site, and that it has a phylogenetically correlated effect given by
%% one of the above models.  Let $\bm D$ be the matrix with $\bm x$ on
%% the diagonal and $\bm I$ be an identity matrix of size equal to the
%% number of species.  The random effects model matrix would then
%% be given by the diagonal matrix
%% \begin{equation}
%%   \label{eq:3}
%%   \bm Z = \bm D \otimes \bm I
%% \end{equation}

%% Note that it is always possible to put the Cholesky factors in the
%% model matrix.  In this case we have,
%% \begin{equation}
%%   \label{eq:4}
%%   \bm\Lambda_\theta = \theta\bm I
%% \end{equation}
%% and,
%% \begin{equation}
%%   \label{eq:5}
%%   \bm Z =
%%   (\bm D \otimes \bm I)
%%   \begin{bmatrix}
%%     \bm L & \bm 0 \\
%%     \bm L & \bm 0 \\
%%   \end{bmatrix}
%% \end{equation}
%% or
%% \begin{equation}
%%   \label{eq:5}
%%   \bm Z =
%%   (\bm D \otimes \bm I)
%%   \begin{bmatrix}
%%     \bm L & \bm 0 \\
%%     \bm 0 & \bm L \\
%%   \end{bmatrix}
%% \end{equation}
%% because $\bm Z\bm\Lambda_\theta$ remains unchanged by this
%% redefinition.

%% Note also that this model does not allow for phylogenetic correlations
%% among explanatory variables.

%% \subsubsection{Dense templates}

%% The idea is to let the relative covariance factor be,
%% \begin{equation}
%%   \label{eq:1}
%%     \Lambda_\theta =
%%     \begin{bmatrix}
%%       \theta\bm T & \theta\bm T & \cdots & \theta\bm T \\
%%       \theta\bm T & \theta\bm T & \cdots & \theta\bm T \\
%%       \vdots      & \vdots      & \ddots & \vdots \\
%%       \theta\bm T & \theta\bm T & \cdots & \theta\bm T \\
%%     \end{bmatrix} = 
%%     \theta\begin{bmatrix}
%%       \bm T  & \bm T  & \cdots & \bm T \\
%%       \bm T  & \bm T  & \cdots & \bm T \\
%%       \vdots & \vdots & \ddots & \vdots \\
%%       \bm T  & \bm T  & \cdots & \bm T \\
%%     \end{bmatrix}
%% \end{equation}
%% where $\bm T$ is an \emph{a priori} known triangular matrix
%% (e.g. Cholesky factor of a phylogenetic covariance matrix).

%% To specify this model 

%% \subsubsection{Block diagonal repeating templates}

%% \begin{equation}
%%   \label{eq:1}
%%     \Lambda_\theta =
%%     \theta\begin{bmatrix}
%%       \bm T  & \bm 0  & \cdots & \bm 0 \\
%%       \bm 0  & \bm T  & \cdots & \bm 0 \\
%%       \vdots & \vdots & \ddots & \vdots \\
%%       \bm 0  & \bm 0  & \cdots & \bm T \\
%%     \end{bmatrix}
%% \end{equation}

\subsubsection{Multiparameter template models}

For the future.  The idea is to take a singular value decomposition of
the triangular template, $\bm T = \bm U \bm D \bm V^\top$.  The
simple template model can be expressed as $\theta\bm T = \bm U
(\theta\bm D) \bm V^\top$.  Therefore, the simple template model can be
generalized by letting the singular values be a function of a
parameter vector, $\bm\theta$.

\section{Examples}

\subsection{Simple simulation example}

I simulate a small data set with the following dimensions.
<<simulate params>>=
n <- 60 # samples 
p <- 2  # fixed effects
q <- 30 # random effects
@ %
The covariance factor, $\Lambda_{\bm\theta}^\top$, is dense (although
we must specify it with a sparse structure).
<<cov fact sims>>=
covTemplate <- as(chol(cov(matrix(rnorm((q+1)*q), q + 1, q))),
                  "sparseMatrix")
Lambdat <- covTemplate
@ %
This structure could represent a phylogenetic covariance matrix for
example.
<<viewLambdat, fig.width = 4, fig.height = 4>>=
image(Lambdat)
@ %
The transposed random effects model matrix and fixed effects model
matrix are given by the following.
<<mod mat sims>>=
Zt <- sparseMatrix(i = rep(1:q, 6),
                   j = as.vector(outer(rep(1:10, 3), seq(0, 50, 10), "+")),
                   x = rep(rnorm(10), 18))
X <- matrix(rnorm(n * p), n, p)
@ %
The matrix has the following pattern.  I don't know what this might
represent, but I just wanted to show that essentially any structure
will be fine.  For real examples, one may freely compute Kronecker
products and prewhiten, etc.
<<viewZt, fig.width = 5, fig.height = 3>>=
image(Zt)
@ %
Then we simulate the response vector, weights, and offset.
<<resp vect sims>>=
eta <- as.numeric(X %*% c(1, 1) + t(Zt) %*% t(Lambdat) %*% rnorm(q))
y <- rbinom(n, 1, plogis(eta))
weights <- rep(1, n); offset <- rep(0, n)
@ %

\subsubsection{Organize the parameter vector}

To fit this model we need to use a general nonlinear optimizer, which
usually require a single parameter vector.  Therefore, I put all three
types of parameters in a single vector.
<<initial>>=
initPars <- c(covar = 1,
              fixef = c(0, 0),
              loads = rnorm(10))
@ %
Importantly, the deviance function needs to know how to find the
different types of parameters, and one specifies this with a list of
indices.
<<par indices>>=
parInds <- list(covar = 1,
                fixef = 2:3,
                loads = 4:13)
@ %
Because this is a general approach, we must specify functions that
take the parameter vectors and update the various objects.  In
particular, we need a function to map the \texttt{covar} parameters
into the nonzero values of \texttt{Lambdat} (stored in
\texttt{Lambdat@x}).  Similarly, we need to map the factor loadings,
\texttt{loads}, into the nonzero values of \texttt{Zt}.
<<mappings>>=
mapToCovFact <- function(covar) covar * covTemplate@x
mapToModMat <- function(loads) rep(loads, 18)
@ %
Note that the covariance factor is updated as though it were a
Brownian motion model with parameter \texttt{covar} controlling the
rate of evolution.  Here I use the covariance factor for introducing
phylogenetic information, but the random effects model matrix could
also be used.  In this case however, I wanted to illustrate the
possibility of including factor loadings, which should be in the model
matrix.  In this illustrative example, the parameters have an effect
on every nonzero element of the matrices.  However, often (usually)
there are no factor loadings and in this case, \texttt{mapToModMat}
should just return the same nonzero values for any value of the
loadings.  Here is an example of using the mapping functions to update
the two sparse matrices.
<<illustrate mappings>>=
Lambdat@x <- mapToCovFact(initPars[parInds$covar])
Zt@x <- mapToModMat(initPars[parInds$loads])
@ %

\subsubsection{Construct the deviance function}

The interesting thing to report here is that once all of these
structures and mappings are produced, the computation of the deviance
function is now quite straightforward.
<<make the deviance function>>=
devfun <- mkGeneralGlmerDevfun(y, X, Zt, Lambdat,
                               weights, offset,
                               initPars, parInds,
                               mapToCovFact, mapToModMat)                               
@ %
Here is an example of evaluating it.
<<use the dev funct>>=
devfun(initPars)
@ %

\subsubsection{Optimize the deviance function}

We may now use any nonlinear optimizer.
<<optimize the deviance function>>=
opt <- minqa:::bobyqa(initPars, devfun)
@ %
And here are the optimum parameter values.
<<look at the optimal solution>>=
setNames(opt$par, names(initPars))
@ %

\subsection{A latent factor model}

<<more packages, message = FALSE>>=
library(reo)
library(multitable)
@ %

Here is an example with Don Jackson's Masters thesis.
<<fish data>>=
data(fish)
data(limn)
Y <- as.matrix(fish)
n <- nrow(Y)
m <- ncol(Y)
x <- as.vector(scale(limn$pH))
dl <- data.list(Y = Y, x = x,
                dimids = c("sites", "species"))
dl <- dims_to_vars(dl)
summary(dl)
@ %
I use the \texttt{multitable} package to organize multivariate data
(could put traits in there too).  Convert it to long format,
<<long>>=
head(df <- as.data.frame(dl))
@ %

The response vector.
<<fish resp>>=
y <- df$Y
weights <- rep(1, length(y)); offset <- rep(0, length(y))
@ %
The fixed effects design matrix.
<<fish X>>=
X <- model.matrix(Y ~ x, df)[,]
@ %
The random effects design matrix.
<<fish Zt>>=
Jspecies <- t(as(as.factor(df$species), Class = "sparseMatrix"))
Zt <- KhatriRao(t(Jspecies), t(X))
@ 
Now this design matrix only contains `traditional' random effects, not
factor loadings.
<<loadings matrix>>=
nFreeLoadings <- m
U <- matrix(1:nFreeLoadings, nrow = m, ncol = 1)
latentVarNames <- "latent"
U <- setNames(as.data.frame(U), latentVarNames)
latentData <- data.list(U, drop = FALSE, dimids = "species")
df <- as.data.frame(dl + latentData)
Jsites <- with(df, t(as(as.factor(sites), Class = "sparseMatrix")))
Zt <- rBind(KhatriRao(t(Jsites), t(model.matrix(Y ~ 0 + latent, df))), Zt)
@ %

<<cov fac fish>>=
templateFact <- sparseMatrix(i = 1:n, j = 1:n, x = rep(1, n))
ii <- rep(1:2, 1:2); jj <- sequence(1:2)
templateRanef <- sparseMatrix(i = ii, j = jj, x = 1 * (ii == jj))
Lambdat <- .bdiag(c(list(templateFact), 
                    rep(list(templateRanef), m)))
@ %

<<loadings mapping fish>>=
mapToModMat <- local({
    Ztx <- Zt@x
    Zwhich <- Zt@i %in% (seq_len(n) - 1)
    Zind <- Zt@x[Zwhich]
    loadInd <- 1:nFreeLoadings
    function(loads) {
        Ztx[Zwhich] <- loads[Zind]
        return(Ztx)
    }
})
@ %

<<lambda mapping fish>>=
mapToCovFact <- local({
    Lambdatx <- Lambdat@x
    LambdaWhich <- (n+1):length(Lambdatx)
    LindTemplate <- ii + 2 * (jj - 1) - choose(jj, 2)
    Lind <- rep(LindTemplate, m)
    function(covar) {
        Lambdatx[LambdaWhich] <- covar[Lind]
        return(Lambdatx)
    }
})
@ %

<<pars fish>>=
initPars <- c(covar = c(1, 0, 1),
              fixef = c(0, 0),
              loads = rep(0, m))
parInds <- list(covar = 1:3,
                fixef = 4:5,
                loads = (1:m)+5)
@ %

<<make fish devfun, warning = FALSE>>=
devfun <- mkGeneralGlmerDevfun(y, X, Zt, Lambdat,
                               weights, offset, 
                               initPars, parInds,
                               mapToCovFact, mapToModMat)
@ %

<<opt fish, eval = TRUE>>=
opt <- minqa:::bobyqa(initPars, devfun)
setNames(opt$par, names(initPars))
@ %

<<ordination diagram, fig.width = 7, fig.height = 7>>=
siteScores <- cbind(pH = x,
                    latent = environment(devfun)$pp$b(1)[1:n])
speciesScores <- cbind(pH = environment(devfun)$pp$b(1)[-(1:(n+m))],  
                       latent = opt$par[parInds$loads])
rownames(siteScores) <- rownames(Y)
rownames(speciesScores) <- colnames(Y)
biplot(siteScores, speciesScores, cex = 0.5)
@ %

\subsection{A simple phylogenetic example}

Working on example in the `pglmer` helpfile.  Going well ...


\section{Discussion}

An important point is that \texttt{mkGeneralGlmerDevfun} deals with
model fitting only.  However, in any application a model specification
module and model presentation/inference module must also be provided.
At this point, I have spent way way way too too too long thinking
about how to do this in a general way.  I need to get on with
community ecology, and so the way forward is to have this general
approach to model fitting and then treat specification and
presentation separately.

As always, lot's to worry about.
\begin{itemize}
\item I'm expecting lots of bugs at this point
\item Starting values?
\item Control parameters?  Can \texttt{glmerControl} be leveraged?
  Probably.
\end{itemize}

\end{document}
